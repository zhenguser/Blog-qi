(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{222:function(t,n,e){"use strict";e.r(n);var a=e(19),r=Object(a.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"关于我badge"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于我badge"}},[t._v("#")]),t._v(" 关于我Badge "),e("Badge",{attrs:{text:"beta",type:"warning"}}),t._v(" "),e("Badge",{attrs:{text:"默认主题"}})],1),t._v(" "),e("p",[t._v("热爱生活，喜欢新事物。")]),t._v(" "),e("p",[t._v("策略模式：\n官方描述（定义一系列算法，把他们封装起来，并且使它们可以相互替换）\n白话文描述：有共同的抽象行为，具体不同的行为称作为不同的策略，最终可以使用Context上下文获取对应策略。\n应用场景:解决多重if判断问题、聚合支付平台、第三方联合登陆、调用多个不同短信接口等。")]),t._v(" "),e("p",[t._v("责任链模式:\n官方描述:（将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。）\n白话文描述：每一个业务模块之间相互依赖比较有关联、每个关联模块称作为handler(处理器)使用上一个handler引用到下一个hanlder实现一个链表。\n应用场景: 权限控制、网关权限控制、审批、风控系统等。")]),t._v(" "),e("p",[t._v("模版方法:\n官方描述：定义一个算法结构，而将一些步骤延迟到子类实现。\n白话文描述：\n提前定义好整体的骨架，不同的行为让字类实现，相同的行为直接定义在抽象类中复用。\n有大体共同抽象行为全部交给父类实现，不同的行为让子类实现。\n应用场景：支付异步回调重构、Servlet实现")]),t._v(" "),e("p",[t._v("装饰模式：\n官方描述:动态的给对象添加新的功能。\n白话文描述：\n在不改变原有对象的基础上附加功能，相比生成子类更灵活。\n应用场景：IO流")]),t._v(" "),e("Valine")],1)}),[],!1,null,null,null);n.default=r.exports}}]);